


rule sort_bam:
    input:
        alignment=expand("{out}/alignment/{{sample}}_trimmed_filt_merged.1_bismark_bt2_pe.bam",out=config["output_dir"]),
    output:
        alignmentSorted=expand("{out}/alignment/{{sample}}_sorted.bam",out=config["tmpdir"])
    conda:
        "../env/samtools.yaml"
    shell:
        "samtools sort {input.alignment} > {output.alignmentSorted}"

rule index_bam:
    input:
        alignmentSorted=expand("{out}/alignment/{{sample}}_sorted.bam",out=config["tmpdir"])
    output:
        aligmentIndex=expand("{out}/alignment/{{sample}}_sorted.bam.bai",out=config["tmpdir"])
    conda:
        "../env/samtools.yaml"
    shell:
        "samtools index {input.alignment}"
        
rule replaceNsWithAsRef:
    input:
        reference=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"])
    output:
        AsReference=expand("{path}/AAAAref.fa",path=config["tmpdir"])
    shell:
        "cat {input.reference} | sed 's/N/A/g' > {output.AsReference}"

rule referenceDict:
    input:
        AsReference=expand("{path}/AAAAref.fa",path=config["tmpdir"])
    output:
        AsReferenceDict=expand("{path}AAAAref.dict",path=config["tmpdir"])
    conda:
        "../env/picard.yaml"
    shell: 
        "picard CreateSequenceDictionary R={input.AsReference} O={output.AsReferenceDict}"
#TODO there cannot be a double // in the in or output. To ensure the sed command works but I'm not to sure how to enforce this
rule dictionaryHack:
    input:
        AsReferenceDict=expand("{path}AAAAref.dict",path=config["tmpdir"]),
        reference=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"])
    output:
        referenceDictReal=expand("{path}/output_denovo/NNNNref/ref.dict",path=config["output_dir"])
    shell:
        "cat {input.AsReferenceDict} | sed 's|{input.AsReferenceDict}|{input.reference}|' > {output.referenceDictReal}"

rule faidx_ref:
    input:
        reference=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"])
    output:
        referenceFai=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"])
    conda:
        "../env/samtools.yaml"
    shell:
        "samtools faidx {input.reference}"


# call SNPs from recalibrated alignments
rule call_SNPs_denovo:
    input:
        alignment=expand("{out}/alignment/{{sample}}_sorted.bam",out=config["tmpdir"]),
        reference=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"]),
        referenceDict=expand("{path}/output_denovo/NNNNref/ref.dict",path=config["output_dir"]),
        referenceFai=expand("{path}/output_denovo/NNNNref/ref.fa",path=config["output_dir"])
    output:
        perIndVCF=expand("{path}/snp_calling/{{sample}}_snp.raw.vcf.out",path=config["output_dir"]),
        bisSNP_meth=expand("{path}/methylation_calling/bis-SNP/{{sample}}_cpg.raw.vcf",path=config["output_dir"])
    log:
        expand("{path}/log/snp_call/{{sample}}_call.log",path=config["output_dir"])
    conda:
        "../env/env_bis-snp0.82.yaml"
    threads: 1
    shell:
        "(bis-snp -T BisulfiteGenotyper -R {input.reference} -I {input.alignment} -vfn1 {output.bisSNP_meth} -vfn2 {output.perIndVCF} -stand_call_conf 20 -stand_emit_conf 0 -toCoverage 1000 -mmq 20 -mbq 20) 2> {log}"

