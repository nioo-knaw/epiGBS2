rule FastQCRef:
  input:
      expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"])
  output:
      dir=directory(expand("{path}/fastqc/", path=config["output_dir"]))
  conda:
      "../env/fastqc.yaml"
#  priority: 50
  params:
      q="--quiet",
      threads=config["threads"],
      dir=expand("{path}/fastqc/", path=config["output_dir"]),
      reads=expand("{path}/output_demultiplex/clone-stacks/*.fq.gz", path=config["output_dir"])
  shell: 
        """
        mkdir -p {output.dir}
        fastqc -t {params.threads} {params.q} --outdir {output.dir} {params.reads}
        """

#rule FastqcRefBefMerged:
#  input:
#      expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"]),
#      expand("{path}/output_demultiplex/Watson_R2.fq.gz", path=config["output_dir"]),
#      expand("{path}/output_demultiplex/Crick_R1.fq.gz", path=config["output_dir"]),
#      expand("{path}/output_demultiplex/Crick_R2.fq.gz", path=config["output_dir"])
#  output:
#     expand("{path}/fastqc/Watson_R1_fastqc.html", path=config["output_dir"]),
#     expand("{path}/fastqc/Watson_R2_fastqc.html", path=config["output_dir"]),
#     expand("{path}/fastqc/Crick_R1_fastqc.html", path=config["output_dir"]),
#     expand("{path}/fastqc/Crick_R2_fastqc.html", path=config["output_dir"])
#  conda:
#      "../env/fastqc.yaml"
#      q="--quiet",
#      threads="2",
#      dir=expand("{path}/fastqc/", path=config["output_dir"]),
#      reads=expand("{path}/output_demultiplex/*.fq.gz", path=config["output_dir"])
#  shell: "fastqc -t {params.threads} {params.q} --outdir {params.dir} {params.reads}"

rule MultiQCRef:
  input:
      before=expand("{path}/fastqc/", path=config["output_dir"]),
      map=expand("{path}/snp_calling/snp.vcf.gz", path=config["output_dir"])
  output:
      report1=expand("{path}/multiQC_report.html", path=config["output_dir"])
  params:
      dir=expand("{path}/", path=config["output_dir"])
  conda:
      "../env/multiqc.yaml"
  shell: "multiqc {params.dir} --interactive --filename {output.report1}"
