param_id=config["param_denovo"]["identity"]
param_mind=config["param_denovo"]["min-depth"]
param_maxd=config["param_denovo"]["max-depth"]

def getParam_id(param_id):
    if param_id == "default" or param_id == "":
        id = 0.95
    else:
        id = param_id
    return id
def getParam_mind(param_mind):
    if param_mind=="default" or param_mind == "":
        mind = 0
    else:
        mind = param_mind
    return mind
def getParam_maxd(param_maxd):
    if param_maxd=="default" or param_maxd == "":
        dep = 0
    else:
        dep = param_maxd
    return dep



rule denovo_reference:
    input:
        #R1=config["output_dir"] + "/output_demultiplex/demultiplex_1_fastq.txt.gz",
        #R2=config["output_dir"] + "/output_demultiplex/demultiplex_2_fastq.txt.gz",
        #dir=expand("{path}{read1}", path=config["output_dir"], read1="/output_demultiplex/"),
        bar=expand("{path}/{bar}", path=config["input_dir"], bar=config["barcodes"]),
        CrickR1=expand("{path}/output_demultiplex/Crick_R1.fq.gz", path=config["output_dir"]),
        CrickR2=expand("{path}/output_demultiplex/Crick_R2.fq.gz", path=config["output_dir"]),
        WatsonR1=expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"]),
        WatsonR2=expand("{path}/output_demultiplex/Watson_R2.fq.gz", path=config["output_dir"])

    output:
        #config["output_dir"] + "/output_denovo/consensus_cluster.renamed.fa",
        #config["output_dir"] + "/output_denovo/consensus_cluster.fa",
        #config["output_dir"] + "/output_denovo/consensus.fa",
        #config["output_dir"] + "/output_denovo/Assembled.fq.gz",
        #config["output_dir"] + "/output_denovo/Unassembled.R2.fq.gz",
        #config["output_dir"] + "/output_denovo/Unassembled.R1.fq.gz",
        #config["output_dir"] + "/output_denovo/consensus_cluster.renamed.fa.fai"
        ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa"),
        consensus_cluster=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.fa"),
        consensus=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus.fa"),
        assemble=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Assembled.fq.gz"),
        unass_R2=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Unassembled.R2.crick.fq.gz"),
        unass_R1=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Unassembled.R1.watson.fq.gz"),
        index_ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa.fai")


    params:
        cycles=config["cycles"],
        dir=expand("{path}{read1}", path=config["output_dir"], read1="/output_demultiplex/"),
        tmp=expand("{tmp}", tmp=config["tmpdir"]),
        identity=getParam_id(param_id),
        min_depth=getParam_mind(param_mind),
        max_depth=getParam_maxd(param_maxd),
        indir=expand("{path}{read1}", path=config["output_dir"], read1="/output_demultiplex"),
        outdir= expand("{path}{dir}", path=config["output_dir"], dir="/output_denovo")

    log: log=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/make_reference.log")
    conda:
        "../env/de-novo.yaml"
    threads: 40
    shell:
        "python src/de_novo_reference_creation/make_reference.py "
        "--inputdir {params.indir} "
        "--barcodes {input.bar} "
        "--threads {threads} "
        "--outputdir {params.outdir} "
        "--cycles {params.cycles} "
        "--clustering_treshold {params.identity} "
        "--max_unique_size {params.max_depth} "
        "--min_unique_size {params.min_depth} "
        "--tmpdir {params.tmp} "
        "--log {log} "




rule run_star:
    input:
        merge=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Assembled.fq.gz"),
        R2=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Unassembled.R2.crick.fq.gz"),
        R1=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/Unassembled.R1.watson.fq.gz"),
        ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa"),
        bar=expand("{path}/{bar}", path=config["input_dir"], bar=config["barcodes"])
    output:
        watsonBam=expand("{path}/mapping/watson.bam", path=config["output_dir"]),
        crickBam=expand("{path}/mapping/crick.bam", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        tmp=expand("{tmp}", tmp=config["tmpdir"])
    threads: 40
    conda:
        "../env/mapping.yaml"
    log:
        config["output_dir"] + "/log/log_STAR.txt"
    shell:
        "python src/mapping_varcall/map_STAR.py "
        "--tmpdir {params.tmp} "
        "--merged {input.merge} "
        "--reads_R1 {input.R1} "
        "--reads_R2 {input.R2} "
        "--reference {input.ref} "
        "--barcodes {input.bar} "
        "--output_dir {params.out_dir} "
        "--threads {threads}"

rule run_mpileup_watson:
    input:
        watsonBam=expand("{path}/mapping/watson.bam", path=config["output_dir"]),
        ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa")
    output:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        depth=100000,
        mq=15,
        bq=0
    conda:
        "../env/samtools-1.3.1.yaml"
    shell:
        "samtools mpileup --reference {input.ref} "
        "-gt DP,AD,INFO/AD  --max-depth {params.depth} "
        "-q {params.mq} -Q {params.bq} "
        "--skip-indels "
        "-vu {input.watsonBam} | grep -v '^##contig='|bgzip -c > {output.watsonVCF}"

rule run_mpileup_crick:
    input:
        crickBam=expand("{path}/mapping/crick.bam", path=config["output_dir"]),
        ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa")
    output:
        crickVCF=expand("{path}/mapping/crick.vcf.gz", path=config["output_dir"])
    params:
        out_dir=expand("{path}{file}", path=config["output_dir"], file="/mapping"),
        depth=100000,
        mq=15,
        bq=0
    conda:
        "../env/samtools-1.3.1.yaml"
    shell:
        "samtools mpileup --reference {input.ref} "
        "-gt DP,AD,INFO/AD  --max-depth {params.depth} "
        "-q {params.mq} -Q {params.bq} "
        "--skip-indels "
        "-vu {input.crickBam} | grep -v '^##contig='|bgzip -c > {output.crickVCF}"

rule merge_watson_crick:
    input:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"]),
        crickVCF=expand("{path}/mapping/crick.vcf.gz", path=config["output_dir"])
    output:
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"])
    params:
        mergedtsv=expand("{path}/mapping/merged.tsv", path=config["output_dir"])
    conda:
        "../env/merge.yaml"
    shell:
        "python src/mapping_varcall/merge_watson_crick-old.py "
        "-w {input.watsonVCF} "
        "-c {input.crickVCF} "
        "-o {params.mergedtsv}"

rule SNP_calling:
    input:
        watsonVCF=expand("{path}/mapping/watson.vcf.gz", path=config["output_dir"]),
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"])
    output:
        snpVCF=expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"])
    params:
        snpvcf=expand("{path}/mapping/snp.vcf", path=config["output_dir"])
    conda:
        "../env/SNP-calling.yaml"
    shell:
        "python src/mapping_varcall/SNP_calling.py "
        "-m {input.mergedTSV} "
        "-w {input.watsonVCF} "
        "-s {params.snpvcf}"

rule methylation_calling:
    input:
        mergedTSV=expand("{path}/mapping/merged.tsv.gz", path=config["output_dir"]),
        snpVCF=expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"]),
        ref=expand("{path}{file}", path=config["output_dir"], file="/output_denovo/consensus_cluster.renamed.fa")
    output:
        methylationBed=expand("{path}/mapping/methylation.bed", path=config["output_dir"]),
        methylationIGV=expand("{path}/mapping/heatmap.igv", path=config["output_dir"])
    conda:
        "../env/methylation-calling.yaml"
    shell:
        "python src/mapping_varcall/methylation_calling.py "
        "-r {input.ref} "
        "-m {input.mergedTSV} "
        "-o {output.methylationBed} "
        "-s {input.snpVCF}  "
        "-heat {output.methylationIGV}"

rule fastqc:
  input:
      expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"])
  output:
      dir=directory(expand("{path}/fastqc/", path=config["output_dir"]))

  conda:
       "../env/fastqc.yaml"
  threads: 8
  params:
       q="--quiet",
       threads=8,
       dir=expand("{path}/fastqc/", path=config["output_dir"]),
       reads=expand("{path}/output_demultiplex/clone-stacks/*.fq.gz", path=config["output_dir"])
  shell: "fastqc -t {params.threads} {params.q} --outdir {output.dir} {params.reads}"

rule logparse:
  input:
      demultiplex=expand("{path}/output_demultiplex/Watson_R1.fq.gz", path=config["output_dir"]),
      denovo=expand("{path}/output_denovo/consensus_cluster.renamed.fa", path=config["output_dir"])
  output: expand("{path}/log/demultiplexing.log", path=config["output_dir"])
  params:
      process=expand("{path}/output_demultiplex/clone-stacks/process_radtags.clone.log", path=config["output_dir"]),
      demultiplex=expand("{path}/output_demultiplex/demultiplex.log", path=config["output_dir"]),
      denovo=expand("{path}/output_denovo/make_reference.log", path=config["output_dir"]),
      outdir=expand("{path}/log/",path=config["output_dir"])
  conda:
    "../env/python3.yaml"
  shell: "python ./src/report/parse-logs.py -p {params.process} -m {params.denovo} -d {params.demultiplex} -o {params.outdir}"

rule Multiqc:
    input:
      before=expand("{path}/fastqc/", path=config["output_dir"]),
      demultiplexing=expand("{path}/log/demultiplexing.log", path=config["output_dir"]),
      map=expand("{path}/mapping/snp.vcf.gz", path=config["output_dir"])
    output:
      report1=expand("{path}/multiQC_report.html", path=config["output_dir"])
    params:
        dir=expand("{path}/", path=config["output_dir"]),
        config="src/env/multiqc_config.yaml"
    conda:
      "../env/multiqc.yaml"
    shell: "multiqc  {params.dir} -c {params.config} --interactive --filename {output.report1}"


onerror:
	print("An error occurred, look into log files")
